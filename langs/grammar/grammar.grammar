todo Add imports nodeTypes, along with source maps, so we can correctly support grammars split across multiple files, and better enable grammars from compositions of reusable bits?
todo Do error checking for if you have a firstwordCellType, cells, and/or catchAllCellType with same name.
todo Add enumOption root level type?
todo Allow extending of root grammar nodes
nodeType grammar
 root
 description The Grammar Language is currently just used for type checking and documenting grammar files. The actual tree Grammar Language is still hard coded. Someday it may bootstrap itself from this file.
 catchAllNodeType catchAllError
 nodeTypeOrder tooling todo cellType nodeType
 extensions grammar gram
 example A grammar that parses anything:
  nodeType latin
   root
   catchAllNodeType anyNode
  nodeType anyNode
   baseNodeType blobNode
 version 3.0.0
 inScope tooling todo cellType nodeType
cellType abstractConstant
 highlightScope entity.name.tag
cellType javascriptSafeAlphaNumericIdentifier
 regex [a-zA-Z0-9]+
 reservedWords enum extends function static if while export return class for default require var let const new
cellType anyFirstWord
cellType anyWord
cellType baseNodeTypes
 description There are a few classes of special nodeTypes. BlobNodes don't have their children parsed. Error nodes always report an error.
 todo Remove?
 enum blobNode errorNode
 highlightScope variable.parameter
cellType booleanCell
 enum true false
 highlightScope constant.numeric
cellType cellPropertyName
 highlightScope variable.parameter
cellType cellTypeEnum
 enumFromGrammar cellType
cellType cellTypeId
 extends javascriptSafeAlphaNumericIdentifier
cellType cellTypeIdConstant
 highlightScope variable.parameter
cellType constantIdentifier
 todo Extend javascriptSafeAlphaNumericIdentifier
 regex [a-zA-Z]\w+
 description A word that can be assigned to the node class in the target language.
cellType constructorFilePath
cellType enumOption
 todo Add an enumOption top level type, so we can add data to an enum option such as a description.
cellType extraWord
 highlightScope invalid
cellType fileExtension
 regex [a-zA-Z0-9]+
cellType floatCell
 regex \-?[0-9]*\.?[0-9]*
 highlightScope constant.numeric
cellType grammarTypes
 enum cellType nodeType
cellType intCell
 regex \-?[0-9]+
 highlightScope constant.numeric
cellType javascriptCodeWord
cellType lowercaseWord
 regex [a-z]+
cellType nodeTypeEnum
 highlightScope variable.parameter
 enumFromGrammar nodeType
cellType nodeTypeId
 todo Cell type checking.
 description This doubles as the class name in Javascript.
 highlightScope variable.parameter
 extends javascriptSafeAlphaNumericIdentifier
cellType nodeTypeIdConstant
 highlightScope variable.function
cellType propertyName
 highlightScope constant.language
cellType regexWord
 highlightScope string.regexp
cellType reservedWord
 description A word that a cell cannot contain.
 highlightScope string
cellType scopeName
 enum comment comment.block comment.block.documentation comment.line constant constant.character.escape constant.language constant.numeric constant.numeric.complex constant.numeric.complex.imaginary constant.numeric.complex.real constant.numeric.float constant.numeric.float.binary constant.numeric.float.decimal constant.numeric.float.hexadecimal constant.numeric.float.octal constant.numeric.float.other constant.numeric.integer constant.numeric.integer.binary constant.numeric.integer.decimal constant.numeric.integer.hexadecimal constant.numeric.integer.octal constant.numeric.integer.other constant.other constant.other.placeholder entity entity.name entity.name.class entity.name.class.forward-decl entity.name.constant entity.name.enum entity.name.function entity.name.function.constructor entity.name.function.destructor entity.name.impl entity.name.interface entity.name.label entity.name.namespace entity.name.section entity.name.struct entity.name.tag entity.name.trait entity.name.type entity.name.union entity.other.attribute-name entity.other.inherited-class invalid invalid.deprecated invalid.illegal keyword keyword.control keyword.control.conditional keyword.control.import keyword.declaration keyword.operator keyword.operator.arithmetic keyword.operator.assignment keyword.operator.bitwise keyword.operator.logical keyword.operator.word keyword.other markup markup.bold markup.deleted markup.heading markup.inserted markup.italic markup.list.numbered markup.list.unnumbered markup.other markup.quote markup.raw.block markup.raw.inline markup.underline markup.underline.link meta meta.annotation meta.annotation.identifier meta.annotation.parameters meta.block meta.braces meta.brackets meta.class meta.enum meta.function meta.function-call meta.function.parameters meta.function.return-type meta.generic meta.group meta.impl meta.interface meta.interpolation meta.namespace meta.paragraph meta.parens meta.path meta.preprocessor meta.string meta.struct meta.tag meta.toc-list meta.trait meta.type meta.union punctuation punctuation.accessor punctuation.definition.annotation punctuation.definition.comment punctuation.definition.generic.begin punctuation.definition.generic.end punctuation.definition.keyword punctuation.definition.string.begin punctuation.definition.string.end punctuation.definition.variable punctuation.section.block.begin punctuation.section.block.end punctuation.section.braces.begin punctuation.section.braces.end punctuation.section.brackets.begin punctuation.section.brackets.end punctuation.section.group.begin punctuation.section.group.end punctuation.section.interpolation.begin punctuation.section.interpolation.end punctuation.section.parens.begin punctuation.section.parens.end punctuation.separator punctuation.separator.continuation punctuation.terminator source source.language-suffix.embedded storage storage.modifier storage.type storage.type keyword.declaration.type storage.type.class keyword.declaration.class storage.type.enum keyword.declaration.enum storage.type.function keyword.declaration.function storage.type.impl keyword.declaration.impl storage.type.interface keyword.declaration.interface storage.type.struct keyword.declaration.struct storage.type.trait keyword.declaration.trait storage.type.union keyword.declaration.union string string.quoted.double string.quoted.other string.quoted.single string.quoted.triple string.regexp string.unquoted support support.class support.constant support.function support.module support.type text text.html text.xml variable variable.annotation variable.function variable.language variable.other variable.other.constant variable.other.member variable.other.readwrite variable.parameter
 highlightScope string
cellType scriptUrl
cellType semanticVersion
 regex [0-9]+\.[0-9]+\.[0-9]+
 highlightScope constant.numeric
cellType stringCell
 highlightScope string
cellType tag
cellType todoWord
 highlightScope comment
cellType toolingDirectiveWord
 highlightScope comment
cellType word
 regex [a-zA-Z]+
 highlightScope variable.parameter
cellType extendedCellType
 extends cellTypeId
cellType exampleWord
 highlightScope comment
 extends stringCell
nodeType abstractCompilerRule
 abstract
 todo Remove if we remove compiler stuff?
 catchAllCellType anyWord
 firstCellType propertyName
nodeType abstractConstant
 abstract
 description Assign a constant to a nodeType which will be available in the compiled nodeType classes.
 firstCellType propertyName
nodeType abstractNodeTypeRule
 abstract
 firstCellType propertyName
 single
nodeType catchAllError
 baseNodeType errorNode
nodeType catchAllExampleLine
 catchAllCellType exampleWord
 firstCellType exampleWord
 catchAllNodeType catchAllExampleLine
nodeType catchAllJavascriptCodeLine
 catchAllCellType javascriptCodeWord
 catchAllNodeType catchAllJavascriptCodeLine
nodeType catchAllMultilineStringConstant
 description String constants can span multiple lines.
 catchAllCellType stringCell
 firstCellType stringCell
 catchAllNodeType catchAllMultilineStringConstant
nodeType cellType
 todo Generate a class for each cell type?
 todo Allow abstract cell types?
 cells cellTypeId
 firstCellType cellTypeIdConstant
 inScope highlightScope regex reservedWords enumFromGrammar description enumNode todo extendsCellTypeNode
nodeType compilesTo
 cells fileExtension
 extends abstractNodeTypeRule
 description Optionally specify a file extension that will be used when compiling your language to a file. Generally used on nodeTypes marked root.
nodeType enumFromGrammar
 catchAllCellType grammarTypes
 firstCellType cellPropertyName
nodeType enumNode
 match enum
 catchAllCellType enumOption
 firstCellType cellPropertyName
nodeType extensions
 extends abstractNodeTypeRule
 catchAllCellType fileExtension
 description File extensions of your language. Generally used for nodeTypes marked "root". Sometimes your language might have multiple extensions. If you don't add this, the root node's nodeTypeId will be used as the default file extension.
nodeType highlightScope
 firstCellType propertyName
 cells scopeName
 description Provide this to get syntax highlighting in editors like Sublime and CodeMirror.
 single
nodeType rootNode
 match root
 firstCellType propertyName
 description Mark a nodeType as root if it is the root of your programming language. The nodeTypeId will be the name of your language. The nodeTypeId will also serve as the default file extension, if you don't specify another. If more than 1 nodeType is marked as "root", the last one wins.
nodeType nodeType
 todo Add multiple dispatch?
 cells nodeTypeId
 description Node types are a core unit of your language. They translate to 1 class per nodeType. Examples of nodeType would be "header", "person", "if", "+", "define", etc.
 catchAllNodeType catchAllError
 firstCellType nodeTypeIdConstant
 inScope rootNode abstractNodeTypeRule abstractConstant todo extendsNodeTypeNode
nodeType nodeTypeOrder
 todo Should we just reuse inScope order? And have a property that indicates order is not important?
 todo Add more docs/testing around this. How would it handle things with mixed-order sensitivity such as todo comments?
 todo This isnt properly cell checked. It should reference inScope.
 catchAllCellType nodeTypeId
 extends abstractNodeTypeRule
 description Optionally specify what order nodeTypes should be sorted in when prettifying a file.
nodeType regex
 catchAllCellType regexWord
 description The word must match this pattern or it shall be marked as an error.
 firstCellType cellPropertyName
 single
nodeType reservedWords
 single
 description A list of words that a cell cannot contain.
 catchAllCellType reservedWord
 firstCellType cellPropertyName
nodeType todo
 description Todos let you add notes about what is coming in the future in the source code. They are like comments in other languages except should only be used for todos.
 catchAllCellType todoWord
 firstCellType todoWord
 catchAllNodeType todo
nodeType tooling
 description Tooling directives are not part of the language grammar but used for tools like editors, preprocessors and compilers. Something like "tooling onsave {bash command}". Should be at top of file, if present at all.
 catchAllCellType toolingDirectiveWord
 firstCellType toolingDirectiveWord
 catchAllNodeType tooling
nodeType version
 cells semanticVersion
 description Version number of your language. Generally used on nodeTypes marked root.
 extends abstractNodeTypeRule
nodeType closeChildren
 extends abstractCompilerRule
 description When compiling a parent node to a string, this string is appended to the compiled and joined children. Default is blank.
nodeType indentCharacter
 extends abstractCompilerRule
 description You can change the indent character for compiled children. Default is a space.
nodeType catchAllCellDelimiter
 description If a node has a catchAllCell, this is the string delimiter that will be used to join those cells. Default is comma.
 extends abstractCompilerRule
nodeType openChildren
 extends abstractCompilerRule
 description When compiling a parent node to a string, this string is prepended to the compiled and joined children. Default is blank.
nodeType stringTemplate
 extends abstractCompilerRule
 description This template string is used to compile this line, and accepts strings of the format: const var = {someCellId}
nodeType joinChildrenWith
 description When compiling a parent node to a string, child nodes are compiled to strings and joined by this character. Default is a newline.
 extends abstractCompilerRule
nodeType boolean
 cells constantIdentifier
 catchAllCellType booleanCell
 extends abstractConstant
nodeType float
 cells constantIdentifier
 catchAllCellType floatCell
 extends abstractConstant
nodeType int
 cells constantIdentifier
 catchAllCellType intCell
 extends abstractConstant
nodeType string
 cells constantIdentifier
 catchAllCellType stringCell
 catchAllNodeType catchAllMultilineStringConstant
 extends abstractConstant
nodeType abstract
 description An abstract nodeType cannot be used by itself but provides common functionality to nodeTypes that extend it.
 extends abstractNodeTypeRule
nodeType abstractNonTerminalNodeTypeRule
 abstract
 extends abstractNodeTypeRule
nodeType baseNodeType
 cells baseNodeTypes
 description In rare cases with untyped content you can use a blobNode, for now, to skip parsing for performance gains. The base errorNode will report errors when parsed. Use that if you don't want to implement your own error nodeType.
 extends abstractNodeTypeRule
nodeType catchAllCellType
 cells cellTypeEnum
 description If there are extra words in the node's line, parse these words as this type.
 extends abstractNodeTypeRule
nodeType catchAllNodeType
 description If a nodeType is not found in the inScope list, instantiate this type of node instead.
 cells nodeTypeEnum
 extends abstractNodeTypeRule
nodeType cells
 catchAllCellType cellTypeEnum
 description Describes the word type of each word in the line.
 extends abstractNodeTypeRule
nodeType compiler
 todo Remove this and its children?
 inScope stringTemplate catchAllCellDelimiter openChildren closeChildren indentCharacter joinChildrenWith
 extends abstractNodeTypeRule
nodeType description
 catchAllCellType stringCell
 todo Should we make this multiline?
 extends abstractNodeTypeRule
nodeType example
 todo Should this just be a "string" constant on nodes?
 description Provide a one line description and then a snippet of example code.
 catchAllCellType exampleWord
 catchAllNodeType catchAllExampleLine
 extends abstractNodeTypeRule
nodeType extendsNodeTypeNode
 match extends
 description nodeType definitions can extend others.
 todo Add mixin support in addition to/in place of extends?
 cells nodeTypeEnum
 extends abstractNodeTypeRule
nodeType extendsCellTypeNode
 match extends
 description cellType definitions can extend others.
 todo Add mixin support in addition to/in place of extends?
 cells cellTypeEnum
 firstCellType propertyName
 single
nodeType firstCellType
 cells cellTypeEnum
 description If you have an any node, use this to correctly parse the first word.
 extends abstractNodeTypeRule
nodeType frequency
 todo Remove this nodeType. Switch to conditional frequencies.
 cells floatCell
 extends abstractNodeTypeRule
nodeType inScope
 description A list of possible child nodeTypes for a node.
 catchAllCellType nodeTypeEnum
 extends abstractNodeTypeRule
nodeType javascript
 todo Urgently need to get submode syntax highlighting running! (And eventually LSP)
 description Provide raw javascript code that will be inserted into a node type's class.
 catchAllNodeType catchAllJavascriptCodeLine
 extends abstractNodeTypeRule
nodeType match
 cells anyWord
 description If present, this word will be used as the first word instead of the nodeTypeId.
 extends abstractNodeTypeRule
nodeType required
 description If present, the parent node will have an error if one of these nodes is not provided.
 extends abstractNodeTypeRule
nodeType single
 description If present and their are more than 1 of these nodes on the parent, an error will be present.
 extends abstractNodeTypeRule
nodeType tags
 catchAllCellType tag
 extends abstractNodeTypeRule