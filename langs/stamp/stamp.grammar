todo File permissions
nodeType stamp
 root
 description A Tree Language for creating distributable text template files that expand to folders and files.
 catchAllNodeType error
 javascript
  async executeSeries(context) {
    const length = this.length
    for (let index = 0; index < length; index++) {
      const node = this.nodeAt(index)
      await node.execute(context)
    }
    return context
  }
  async execute(context) {
    await this.executeSeries(context)
  }
  static dirToStamp(absPathWithoutEndingSlash, output = "list") {
    const fs = require("fs")
    // todo: add chmod, file metadata
    if (absPathWithoutEndingSlash.startsWith(".")) absPathWithoutEndingSlash = jtree.Utils.resolvePath(absPathWithoutEndingSlash, process.cwd() + "/")
    const stat = fs.statSync(absPathWithoutEndingSlash)
    if (!stat.isDirectory()) throw new Error(`${absPath} is a file not a directory.`)
    const fns = {
      list: (file, reducedPath) => {
        const stat = fs.statSync(file)
        const isDir = stat.isDirectory()
        if (isDir) return `folder ` + reducedPath
        return `file ` + reducedPath
      },
      content: (file, reducedPath) => {
        const stat = fs.statSync(file)
        const isDir = stat.isDirectory()
        if (isDir) return `folder ` + reducedPath
        const content = fs.readFileSync(file, "utf8")
        return `file ${reducedPath}
  data${jtree.TreeNode.nest(content, 2)}`
      }
    }
    const fn = fns[output]
    return this._dirToStamp(absPathWithoutEndingSlash, fn)
  }
  static _dirToStamp(absPathWithoutEndingSlash, fileFn) {
    const files = require("recursive-readdir-sync")(absPathWithoutEndingSlash)
    const folderParts = absPathWithoutEndingSlash.split("/")
    const rootFolderName = folderParts.pop()
    const rootFolderPath = folderParts.join("/")
    const pathStartIndex = rootFolderPath.length + 1
    return files.map(file => fileFn(file, file.substr(pathStartIndex))).join("\n")
  }
 inScope hashbangNode prompt folder file
cellType anyFirstWord
cellType extraWord
 highlightScope invalid
cellType anyWord
 highlightScope string
cellType promptWords
 highlightScope string
cellType filepath
cellType varName
 highlightScope string
cellType commentWord
 highlightScope comment
cellType inputType
 regex (string|int|any|lowercase)
cellType property
 highlightScope keyword.control
nodeType hashbangNode
 match #!
 catchAllCellType commentWord
 firstCellType commentWord
nodeType catchAllAnyLine
 catchAllCellType anyWord
 catchAllNodeType catchAllAnyLine
 firstCellType anyWord
nodeType data
 catchAllNodeType catchAllAnyLine
 firstCellType property
nodeType error
 baseNodeType errorNode
nodeType executable
nodeType file
 cells filepath
 firstCellType property
 javascript
  compileToBash(parentDir) {
    const filePath = this.getAbsolutePath()
    return `touch ${filePath}\necho -e "${this.childrenToString()}" >> ${filePath}`
  }
  getAbsolutePath() {
    return process.cwd() + "/" + this.cells.filepath
  }
  execute() {
    const fs = require("fs")
    const path = this.getAbsolutePath()
    console.log(`Creating file ${path}`)
    const data = this.getNode("data")
    const content = data ? data.childrenToString() : ""
    fs.writeFileSync(path, content, "utf8")
    const isExecutable = this.has("executable") // todo: allow for all file permissions?
    if (isExecutable) fs.chmodSync(path, "755")
  }
 inScope data executable
nodeType folder
 cells filepath
 firstCellType property
 javascript
  compileToBash(parentDir) {
    return `mkdir ${this.getAbsolutePath()}`
  }
  getAbsolutePath() {
    return process.cwd() + "/" + this.cells.filepath
  }
  execute() {
    const path = this.getAbsolutePath()
    console.log(`Creating folder ${path}`)
    require("mkdirp").sync(path)
  }
nodeType prompt
 cells varName inputType
 catchAllCellType promptWords
 firstCellType property
 example Ask for a project name and create a new directory.
  prompt PROJECT_NAME any Enter the name for your new project
  folder PROJECT_NAME
  file PROJECT_NAME/.gitignore
 javascript
  execute() {
    return new Promise((res, rej) => {
      const rl = require("readline").createInterface({
        input: process.stdin,
        output: process.stdout
      })
      rl.question(this.cells.promptWords.join(" ") + " ", answer => {
        rl.close()
        // todo: typecheck the response
        const varName = this.cells.varName
        this.getYoungerSiblings().forEach(node => node.replaceNode(str => str.replace(new RegExp(varName, "g"), answer)))
        res()
      })
    })
  }