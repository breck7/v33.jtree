nodeType project
 root
 description A Tree Language for project dependency management.
 javascript
  getOrderedDependenciesArray() {
    const cloned = this.clone()
    const sorted = []
    const included = {}
    let lastLength
    while (cloned.length) {
      if (lastLength === cloned.length) {
        cloned.forEach(file => {
          console.log(`'${file.getLine()}' is missing '${file.getMissingDependencies(included).join(",")}'`)
        })
        throw new Error(`Circular dependency or other error detected with ${cloned.length} remaining. ${cloned.toString()}`)
      }
      lastLength = cloned.length
      for (let index = 0; index < cloned.length; index++) {
        const file = cloned.nodeAt(index)
        const missingDependencies = file.getMissingDependencies(included)
        if (missingDependencies.length === 0) {
          const path = file.getFilePath()
          file.destroy()
          sorted.push(path)
          included[path] = true
          break
        }
      }
    }
    return sorted
  }
  static _extractImports(sourceCode, regex) {
    const matches = sourceCode.match(regex)
    if (!matches) return []
    const regex2 = /"(.+)"/
    return matches.map(match => match.match(regex2)[1])
  }
  static _getImportsCommonJs(sourceCode) {
    return this._extractImports(sourceCode, /(\n|^)const .* \= require\("([^"]+)"\)/g)
  }
  static _getImportsTypescript(sourceCode) {
    return this._extractImports(sourceCode, /(\n|^)import .* from "([^"]+)"/g)
  }
  static getImports(sourceCode) {
    const files = this._getImportsCommonJs(sourceCode).concat(this._getImportsTypescript(sourceCode))
    return files.map(file => {
      let type = "external"
      if (file.startsWith(".")) type = "relative"
      else if (file.startsWith("/")) type = "absolute"
      return `${type} ${file}`
    })
  }
  static getProjectProgram(arrayOfScriptPaths) {
    const fs = require("fs")
    const files = new jtree.TreeNode(arrayOfScriptPaths.join("\n"))
    const requiredFileList = new jtree.TreeNode()
    files.forEach(child => {
      const line = child.getLine()
      const requiredFiles = this.getImports(fs.readFileSync(line, "utf8"))
      requiredFileList.appendLineAndChildren(`file ${line}`, requiredFiles.length ? requiredFiles.join("\n") : undefined)
    })
    return requiredFileList.toString()
  }
 inScope file
 catchAllNodeType error
cellType anyFirstWord
cellType filepath
 highlightScope string
cellType termWord
 highlightScope variable.parameter
cellType fileConstant
 highlightScope keyword.control
nodeType term
 catchAllCellType filepath
 firstCellType termWord
 abstract
nodeType error
 baseNodeType errorNode
nodeType file
 catchAllCellType filepath
 firstCellType fileConstant
 inScope external absolute relative
 javascript
  getFilePath() {
    return this.cells.filepath.join(" ")
  }
  _getDependencies() {
    return this.getChildren()
      .map(child => {
        const firstWord = child.getFirstWord()
        const childFilePath = child.cells.filepath.join(" ")
        if (firstWord === "external") return ""
        if (firstWord === "absolute") return childFilePath
        const link = childFilePath
        const folderPath = jtree.Utils.getPathWithoutFileName(this.getFilePath())
        const resolvedPath = require("path").resolve(folderPath + "/" + link)
        return resolvedPath
      })
      .filter(path => path)
  }
  getMissingDependencies(includedMap) {
    return this._getDependencies().filter(file => includedMap[file] === undefined)
  }
nodeType absolute
 extends term
nodeType external
 extends term
nodeType relative
 extends term