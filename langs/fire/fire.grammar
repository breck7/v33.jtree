todo Explore best ways to add polymorphism
todo Explore non-firstWord node type detection
nodeType fire
 root
 description A useless Tree Language that compiles to Javascript for testing Tree Notation features.
 compilesTo js
 inScope hashbang abstractTerminal abstractNonTerminal
 catchAllNodeType error
 javascript
  async execute() { return this.executeSync() }
  executeSync() {
    let outputLines = []
    const _originalConsoleLog = console.log
    const tempConsoleLog = (...params) => outputLines.push(params)
    console.log = tempConsoleLog
    const compiled = this.compile("js")
    eval(compiled)
    console.log = _originalConsoleLog
    console.log(outputLines.join("\n"))
    return outputLines
  }
cellType anyFirstWord
cellType anyWord
cellType boolean
 regex (false|true)
cellType filepath
cellType identifier
 regex [$A-Za-z_][0-9a-zA-Z_$]*
 highlightScope variable
cellType numberCell
 regex \-?[0-9]*\.?[0-9]*
 highlightScope constant.numeric
cellType numberIdentifier
 extends identifier
cellType hashBangWord
 highlightScope comment
cellType hashBangKeyWord
 highlightScope comment
cellType stringCell
 highlightScope string
cellType booleanIdentifier
 extends identifier
cellType functionIdentifier
 extends identifier
cellType identifiers
 extends identifier
cellType instanceIdentifier
 extends identifier
cellType methodIdentifier
 extends identifier
cellType resultIdentifier
 extends identifier
cellType keywordCell
 highlightScope keyword
cellType stringIdentifier
 extends identifier
cellType stringCells
 extends stringCell
nodeType abstractNonTerminal
 inScope abstractTerminal abstractNonTerminal
 firstCellType keywordCell
 abstract
nodeType abstractTerminal
 firstCellType keywordCell
 abstract
nodeType abstractAssignment
 extends abstractTerminal
 abstract
nodeType abstractArithmetic
 cells identifier
 catchAllCellType anyWord
 compiler
  stringTemplate const {identifier} = {anyWord}
 frequency .2
 extends abstractAssignment
 abstract
nodeType abstractJsblock
 compiler
  openChildren  {
  closeChildren }
 extends abstractNonTerminal
 abstract
nodeType abstractBooleanOperator
 description Runs a boolean test and saves result.
 extends abstractAssignment
 abstract
nodeType hashbang
 match #!
 description Standard bash hashbang line.
 catchAllCellType hashBangWord
 firstCellType hashBangKeyWord
 compiler
  stringTemplate // #! {hashBangWord}
nodeType error
 baseNodeType errorNode
 compiler
  stringTemplate // error
nodeType divide
 description Divide Numbers
 compiler
  catchAllCellDelimiter  / 
 extends abstractArithmetic
nodeType modulo
 description Modulo Numbers
 compiler
  catchAllCellDelimiter %
 extends abstractArithmetic
nodeType multiply
 description Multiply Numbers
 compiler
  catchAllCellDelimiter  * 
 extends abstractArithmetic
nodeType substract
 description Subtract Numbers
 compiler
  catchAllCellDelimiter  - 
 extends abstractArithmetic
nodeType add
 description Add numbers and store result
 compiler
  catchAllCellDelimiter  + 
 extends abstractArithmetic
nodeType sum
 description Add numbers and store result
 cells numberIdentifier
 catchAllCellType numberCell
 compiler
  stringTemplate const {numberIdentifier} = [{numberCell}].reduce((sum, num) => sum + num)
  catchAllCellDelimiter , 
 frequency .1
 extends abstractAssignment
nodeType boolean
 description Boolean Assignment
 cells booleanIdentifier boolean
 compiler
  stringTemplate const {booleanIdentifier} = {boolean}
 extends abstractAssignment
nodeType callFunctionAndSet
 description Function Call
 frequency .5
 cells resultIdentifier functionIdentifier
 catchAllCellType anyWord
 compiler
  stringTemplate const {resultIdentifier} = {functionIdentifier}({anyWord})
  catchAllCellDelimiter , 
 extends abstractAssignment
nodeType callMethodAndSet
 description Method Call
 frequency .5
 cells resultIdentifier instanceIdentifier methodIdentifier
 catchAllCellType anyWord
 compiler
  stringTemplate const {resultIdentifier} = {instanceIdentifier}.{methodIdentifier}({anyWord})
  catchAllCellDelimiter , 
 extends abstractAssignment
nodeType join
 description Join strings to form new string
 cells identifier
 catchAllCellType identifiers
 compiler
  stringTemplate const {identifier} = [{identifiers}].join("")
  catchAllCellDelimiter , 
 frequency .2
 extends abstractAssignment
nodeType mutableNumber
 description Mutable Number Assignment
 cells identifier numberCell
 compiler
  stringTemplate let {identifier} = {numberCell}
 extends abstractAssignment
nodeType number
 description Number Assignment
 cells identifier numberCell
 compiler
  stringTemplate const {identifier} = {numberCell}
 frequency .3
 extends abstractAssignment
nodeType numbers
 description Number Array Assignment
 cells identifier
 catchAllCellType numberCell
 frequency .4
 compiler
  stringTemplate const {identifier} = [{numberCell}]
  catchAllCellDelimiter , 
 extends abstractAssignment
nodeType string
 description String Assignment
 cells stringIdentifier
 catchAllCellType anyWord
 compiler
  stringTemplate const {stringIdentifier} = "{anyWord}"
 frequency .2
 extends abstractAssignment
cellType leftNumberCell
 extends numberCell
cellType leftAnyWord
 extends anyWord
nodeType greaterThan
 description Greater than test
 cells identifier leftNumberCell numberCell
 compiler
  stringTemplate const {identifier} = {leftNumberCell} > {numberCell}
 frequency .1
 extends abstractBooleanOperator
nodeType greaterThanOrEqual
 description Greater than or equal to test
 cells identifier leftNumberCell numberCell
 compiler
  stringTemplate const {identifier} = {leftNumberCell} >= {numberCell}
 frequency .1
 extends abstractBooleanOperator
nodeType lessThan
 description Less than test
 cells identifier leftAnyWord anyWord
 compiler
  stringTemplate const {identifier} = {leftAnyWord} < {anyWord}
 frequency .1
 extends abstractBooleanOperator
nodeType lessThanOrEqual
 description Less than or equal to test
 cells identifier leftAnyWord anyWord
 compiler
  stringTemplate const {identifier} = {leftAnyWord} <= {anyWord}
 frequency .1
 extends abstractBooleanOperator
nodeType block
 description block of code
 frequency .2
 compiler
  stringTemplate /* {identifier} */
 extends abstractJsblock
nodeType functionNode
 match function
 description Function Assignment
 cells functionIdentifier
 catchAllCellType anyWord
 compiler
  stringTemplate const {functionIdentifier} = ({anyWord}) =>
  catchAllCellDelimiter , 
 frequency .1
 extends abstractJsblock
nodeType ifNode
 match if
 description If tile
 cells identifier
 frequency .2
 compiler
  stringTemplate if ({identifier})
 extends abstractJsblock
nodeType whileNode
 match while
 description While tile
 cells identifier
 frequency .1
 compiler
  stringTemplate while ({identifier})
 extends abstractJsblock
nodeType callFunction
 description Function call ignore result.
 frequency .1
 cells functionIdentifier
 catchAllCellType anyWord
 compiler
  stringTemplate {functionIdentifier}({anyWord})
  catchAllCellDelimiter , 
 extends abstractTerminal
nodeType decrement
 description Decrement
 cells numberIdentifier
 compiler
  stringTemplate {numberIdentifier}--
 frequency .1
 extends abstractTerminal
nodeType dumpIdentifier
 description Dump variable(s) to console
 catchAllCellType identifier
 compiler
  stringTemplate console.log({identifier})
  catchAllCellDelimiter , 
 frequency .5
 extends abstractTerminal
nodeType exportNode
 match export
 description Export This
 cells identifier
 compiler
  stringTemplate module.exports = {identifier}
 frequency .1
 extends abstractTerminal
nodeType increment
 description Increment
 frequency .3
 cells numberIdentifier
 compiler
  stringTemplate {numberIdentifier}++
 extends abstractTerminal
nodeType printNumber
 extends abstractTerminal
 catchAllCellType numberIdentifier
 compiler
  stringTemplate console.log({numberIdentifier})
nodeType printString
 todo Allow printing of multiline strings
 extends abstractTerminal
 catchAllCellType stringCells
 compiler
  stringTemplate console.log("{stringCells}")
nodeType requireNode
 match require
 description Require Something
 cells identifier filepath
 compiler
  stringTemplate const {identifier} = require("{filepath}")
 frequency .1
 extends abstractTerminal
nodeType returnNode
 match return
 cells anyWord
 compiler
  stringTemplate return {anyWord}
 frequency .1
 extends abstractTerminal